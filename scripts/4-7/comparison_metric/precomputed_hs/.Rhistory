genes_within_1MB_sh1 <- read_table2("question2/4-genes_within_1MB_from_2/genes_within_1MB_sh1.txt",
col_names = FALSE)
genes_within_1MB_sh2 <- read_table2("question2/4-genes_within_1MB_from_2/genes_within_1MB_sh2.txt",
col_names = FALSE)
genes_within_1MB_sh1 <- genes_within_1MB_sh1 %>%
mutate(isDE = X8 %in% DE_common_sh1$X4)
genes_within_1MB_sh2 <- genes_within_1MB_sh2 %>%
mutate(isDE = X8 %in% DE_common_sh2$X4)
colnames(genes_within_1MB_sh1) <- c("chr_h", "start_h", "end_h", "region_name",
"chr_g", "start_g", "end_g", "gene_name",
"nd", "gene_strand", "distance", "isGeneDE" )
colnames(genes_within_1MB_sh2) <- c("chr_h", "start_h", "end_h", "region_name",
"chr_g", "start_g", "end_g", "gene_name",
"nd", "gene_strand", "distance", "isGeneDE" )
a <- genes_within_1MB_sh1 %>%
dplyr::group_by(chr_h, start_h, end_h, region_name) %>%
dplyr::summarise(nGenes = n(), nGenesDE = sum(isGeneDE[isGeneDE])) %>%
dplyr::mutate(fractionOfDEPercent = 100 * nGenesDE / nGenes) %>%
dplyr::filter(nGenes >= 10) %>%
dplyr::arrange(-fractionOfDEPercent)
basedir <- "/mnt/hdd0/univ/thesis-support-material/data/"
setwd(paste0(basedir, "4-7/DE_genes"))
basedir <- "/mnt/hdd0/univ/thesis-support-material/data/"
linc <- data.frame(experiment = factor(c(rep("WT",4), rep("KO",4)), levels = c("WT", "KO")),
sample = factor(rep(c("sample 1", "sample 2", "sample 3", "sample 4"), 2)),
value = c(33,167,202,138,6,9,0,7))
tp53 <- data.frame(experiment = factor(c(rep("shNT",2), rep("sh1",2), rep("sh2",2)), levels = c("shNT", "sh1", "sh2")),
sample = factor(rep(c("sample 1", "sample 2"), 3)),
value = c(588,647,137,182,245,215))
library(ggplot2)
library(dplyr)
library(RColorBrewer)
a <- linc %>%
ggplot(mapping = aes(fill = sample, y = value, x = experiment)) +
theme_classic() +
geom_bar(position = "dodge", stat = "identity") +
scale_fill_brewer(palette = "Paired") +
labs(title = "LINC01605 expression levels upon LINC01605 knockout") +
theme(legend.position = "top",
legend.title = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line( size=.05, color="black"),
panel.grid.minor.y = element_line( size=.05, color="black"),
axis.line.y = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_blank()
)
b <- tp53 %>%
ggplot(mapping = aes(fill = sample, y = value, x = experiment)) +
theme_classic() +
geom_bar(position = "dodge", stat = "identity") +
scale_fill_brewer(palette = "Paired") +
labs(title = "TP53 expression levels upon mutT53 silencing (shRNA)") +
theme(legend.position = "top",
legend.title = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line( size=.05, color="black"),
panel.grid.minor.y = element_line( size=.05, color="black"),
axis.line.y = element_blank(),
axis.line.x = element_blank(),
axis.title.y = element_blank()
)
library(ggpubr)
ggarrange(b, a, ncol = 2, nrow = 1)
rm(a,b)
rm(tp53, linc)
library(readr)
library(ggVennDiagram)
library(ggplot2)
setwd(paste0(basedir, "4-7/DE_genes"))
DE_DESeq2_TP53sil_common_sh12 <- read_csv("DE_DESeq2_TP53sil_common_sh12.txt", col_names = FALSE)$X1
DE_DESeq2_LINC01605ko <- read_csv("DE_DESeq2_LINC01605ko.txt", col_names = FALSE)$X1
x <- list("DE genes in TP53 silencing" = DE_DESeq2_TP53sil_common_sh12,
"DE genes in LINC01605 knockout" = DE_DESeq2_LINC01605ko)
ggVennDiagram(x) + ggplot2::scale_fill_gradient(low="lightyellow", high = "orange")
sessionInfo()
library(DESeq2)
sessionInfo()
BiocManager::install("clusterProfiler")
# precomputed_hs_path: path of the precomputed general similarity matrix between GO terms, needed for computing the first part
#       of the score (use the files provided unless you decide to change the semantic similarity method used)
# precomputed_matrix_path: path where the similarity matrix will be saved once computed and where it will be searched if
#       preComputedMatrix is not set to NULL
# exportMatrix: if TRUE then the computed similarity matrix for the second part of the score will be saved in the directory
#       precomputed_matrix_path, using the following name: first-second-GOType-experiment
# experiment: a string defining the name of the experiment, such as sh1, sh2, ko, ... This is used for exporting the matrix
# returnCommonClusters: if FALSE then the functions returns (NULL, similarityScore). If TRUE then the functions returns
#       (commonClusters, similarityScore).
#       commonClusters is a dataframe containing the GO terms in first that are in commonClusters
computeSimilarity <- function(first,
second,
GOType,
preComputedMatrix = NULL,
naiveMatrixCompute = F,
precomputed_hs_path = "/mnt/hdd0/univ/thesis-support-material/data/4-7/comparison_metric/precomputed_hs",
precomputed_matrix_path = "/mnt/hdd0/univ/thesis-support-material/data/4-7/comparison_metric/precomputed_matrix",
exportMatrix = F,
experiment,
returnCommonClusters = F){
# setting frequency threshold to discard uninformative GO terms
freq.threshold <- 16
p <- first %>%
dplyr::filter(Frequency < freq.threshold) %>%
dplyr::mutate(code = as.numeric(substr(TermID, 4, 999))) %>%
dplyr::mutate(Representative = ifelse(Representative == -1, code, Representative))
g <- second %>%
dplyr::filter(Frequency < freq.threshold) %>%
dplyr::mutate(code = as.numeric(substr(TermID, 4, 999))) %>%
dplyr::mutate(Representative = ifelse(Representative == -1, code, Representative))
# computing first part of the score
print("computing the first part of the score...")
count <- 0
not_in_g <- p %>% dplyr::filter(TermID == 1) # empty
in_common <- p %>% dplyr::filter(TermID == 1) # empty
for(i in 1:nrow(p)){
# only consider the leader
if(p[i,]$Eliminated == F){
# considering now all the terms in its cluster
code <- p[i,]$code
friends <- p %>% dplyr::filter(Representative == !!code)
#friends <- p[p$Representative == code, ]
# checking if in g exists one of the terms in the cluster of i
res <- friends %>% dplyr::inner_join(g, by = c("TermID" = "TermID")) %>% nrow()
if (res > 0) {
count <- count + 1
in_common <- rbind(in_common, friends)
} else {
not_in_g <- rbind(not_in_g, p[i,])
}
rm(code, friends, res)
}
}
part_a <- count
rm(count)
print("done")
# if preComputedMatrix is NULL, then the similarities between the GO terms need to be computed
# otherwise they are imported from the preComputedMatrix file path
simMatrix <- NULL
# GO IDs of the terms belonging to a p cluster not in g
go1 <- (p %>% dplyr::filter(Representative %in% not_in_g$Representative))$TermID
# GO IDs of the terms in g
go2 <- g$TermID
if(length(go1) == 0){
part_b <- 0
} else {
if (is.null(preComputedMatrix)){
print("computing similarity matrix...")
suppressPackageStartupMessages(suppressWarnings(suppressMessages(library(GOSemSim))))
hsGO <- NULL
setwd(precomputed_hs_path)
if(GOType == "BP"){
hsGO <- readRDS(file = "bp.rds")
} else if(GOType == "MF"){
hsGO <- readRDS(file = "mf.rds")
} else if(GOType == "CC"){
hsGO <- readRDS(file = "cc.rds")
} else {
print("Error: Unknown GOType")
exit()
}
#hsGO <- godata('org.Hs.eg.db', ont=GOType, computeIC=T)
# computing the preComputedMatrix  between GO terms
simMatrix <- NULL
if (naiveMatrixCompute){
print("using inefficient way to compute similarity Matrix")
simMatrix <- matrix(data = 0, nrow = length(go1), ncol = length(go2))
for (i in 1:nrow(simMatrix)) {
for (j in 1:ncol(simMatrix)){
simMatrix[i,j] <- goSim(go1[i], go2[j], semData=hsGO, measure="Rel")
}
print(paste0("computing row ", i, " of ", nrow(simMatrix)))
}
if(exportMatrix == T){
setwd(precomputed_matrix_path)
print("exporting computed matrix")
a <- deparse(substitute(first))
b <- deparse(substitute(second))
saveRDS(simMatrix, file = paste0(a,"-", b, "-", GOType, "-", experiment))
rm(a,b)
}
} else {
print("using efficient way to compute similarity Matrix")
simMatrix <- mgoSim(go1, go2, semData=hsGO, measure="Rel", combine=NULL)
}
} else {
print("importing similarities matrix...")
setwd(precomputed_matrix_path)
simMatrix <- readRDS(file = preComputedMatrix)
}
simMatrix[is.na(simMatrix)] <- 0
rownames(simMatrix) <- go1
colnames(simMatrix) <- go2
print("done")
rm(go1, go2)
#print(simMatrix)
# computing the second part of the score
print("computing the second part of the score...")
sim.threshold <- 0.1
score <- 0
g_clusters <- g %>% filter(Eliminated == F)
for(i in 1:nrow(not_in_g)){
code <- not_in_g[i,]$code
friends <- p %>% filter(Representative == !!code)
max_mean_similarity <- 0
max_g_cluster_code <- 0
for(j in 1:nrow(g_clusters)){
g_cluster_code <- g_clusters[j,]$code
g_cluster_friends <- g %>% filter(Representative == !!g_cluster_code)
similarity_max_values <- c()
for(k in 1:nrow(friends)){
similarity_values <- c()
for(h in 1:nrow(g_cluster_friends)){
value <- simMatrix[friends[[k,1]], g_cluster_friends[[h,1]] ]
if (is.na(value)){
#print("warning: NA generated, replaced with 0")
value <- 0
}
similarity_values <- c(similarity_values, value)
}
similarity_max_values <- c(similarity_max_values, max(similarity_values))
}
mean_similarity <- mean(similarity_max_values)
if (mean_similarity > max_mean_similarity) {
max_mean_similarity <- mean_similarity
max_g_cluster_code <- g_cluster_code
}
}
if(max_mean_similarity >= sim.threshold){
score <- score + max_mean_similarity
#print(paste0(code, " ~ ", max_g_cluster_code, " : ", max_mean_similarity))
}
print(paste0((i)/nrow(not_in_g)*100, " %..."))
}
part_b <- score
rm(score)
print("done")
rm(similarity_values, similarity_max_values, mean_similarity, i, j, k, h)
rm(sim.threshold, value)
rm(friends, code, max_mean_similarity)
rm(g_cluster_code, g_cluster_friends, g_clusters, max_g_cluster_code)
}
scale.factor <- 1
representatives <- (p %>% dplyr::filter(Eliminated == F) %>% count())$n
print(paste0("first part: ", part_a, " / ", representatives))
print(paste0("second part: ", part_b, " / ", representatives))
score <- (part_a + part_b)/representatives
print(paste0("final score: ", score))
if(returnCommonClusters){
return(list(score = score, commonClusters = in_common))
} else{
return(list(score = score, commonCusters = NULL))
}
}
setwd("/mnt/hdd0/univ/thesis-support-material/scripts/4-7/comparison_metric/")
source("function.r")
library(readr)
library(dplyr)
basedir <- "/mnt/hdd0/univ/thesis-support-material/scripts/"
setwd(paste0(basedir, "4-7/comparison_metric/"))
source("function.r")
library(readr)
library(dplyr)
exp <- "sh1" # sh1 | linc_ko
pval <- "00001"
basedir <- "/mnt/hdd0/univ/thesis-support-material/"
setwd(paste0(basedir, "scripts/4-7/comparison_metric/"))
source("function.r")
library(readr)
library(dplyr)
exp <- "sh1" # sh1 | linc_ko
pval <- "00001"
setwd("data/4-7/functional_analysis_results/")
basedir <- "/mnt/hdd0/univ/thesis-support-material/"
setwd(basedir)
source("scripts/4-7/comparison_metric/function.r")
setwd(paste0(basedir, "data/4-7/functional_analysis_results/"))
GO <- "BP"
cp <- read_csv(paste0("clusterProfiler/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
panther <- read_csv(paste0("Panther/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
gsea <- read_csv(paste0("GSEA/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
rs350 <- read_csv(paste0("random_samples_goterms/sample350t/revigo/", GO, ".csv"))
rs200 <- read_csv(paste0("random_samples_goterms/sample200t/revigo/", GO, ".csv"))
# -- cp
computeSimilarity(cp, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) # 0.94 (46+15/65) [0.91]
setwd(paste0(basedir, "data/4-7/functional_analysis_results/"))
files_path = paste0(basedir, "scripts/4-7/comparison_metric")
files_path
basedir <- "/mnt/hdd0/univ/thesis-support-material/"
setwd(basedir)
source("scripts/4-7/comparison_metric/function.r")
library(readr)
library(dplyr)
exp <- "sh1" # sh1 | linc_ko
pval <- "00001"
setwd(paste0(basedir, "data/4-7/functional_analysis_results/"))
GO <- "BP"
cp <- read_csv(paste0("clusterProfiler/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
panther <- read_csv(paste0("Panther/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
gsea <- read_csv(paste0("GSEA/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
rs350 <- read_csv(paste0("random_samples_goterms/sample350t/revigo/", GO, ".csv"))
rs200 <- read_csv(paste0("random_samples_goterms/sample200t/revigo/", GO, ".csv"))
# the path must end with trailing slash!
files_path = paste0(basedir, "scripts/4-7/comparison_metric/")
# -- cp
computeSimilarity(cp, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.94 (46+15/65) [0.91]
computeSimilarity(cp, gsea, GOType = GO, preComputedMatrix = "cp-gsea-BP-sh1", naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.79 (24+27/65) [0.77]
computeSimilarity(cp, rs350, GOType = GO, preComputedMatrix = "cp-rs350-BP-sh1", naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.54 (0+35/65) [0.50]
computeSimilarity(cp, rs200, GOType = GO, preComputedMatrix = "cp-rs200-BP-sh1", naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.52 (1+32/65) [0.49]
# -- panther
computeSimilarity(panther, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.78 (48+52/129) [0.71]
computeSimilarity(panther, gsea, GOType = GO, preComputedMatrix = "panther-gsea-BP-sh1", naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F,
returnCommonClusters = T) # 0.85 (59+51/129) [0.83]
computeSimilarity(panther, rs350, GOType = GO, preComputedMatrix = "panther-rs350-BP-sh1", naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.55 (1+70/129) [0.51]
computeSimilarity(panther, rs200, GOType = GO, preComputedMatrix = "panther-rs200-BP-sh1", naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.53 (1+68/129) [0.50]
setwd(paste0(basedir, "data/4-7/functional_analysis_results/"))
GO <- "MF"
cp <- read_csv(paste0("clusterProfiler/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
panther <- read_csv(paste0("Panther/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
gsea <- read_csv(paste0("GSEA/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
rs350 <- read_csv(paste0("random_samples_goterms/sample350t/revigo/", GO, ".csv"))
rs200 <- read_csv(paste0("random_samples_goterms/sample200t/revigo/", GO, ".csv"))
# -- cp
computeSimilarity(cp, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.81 (4+1.7/7)
computeSimilarity(cp, gsea, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.75 (3+2.3/7)
computeSimilarity(cp, rs350, GOType = GO, preComputedMatrix = "cp-rs350-MF-sh1", naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = T) # 0.10 (0+0.7/7)
computeSimilarity(cp, rs200, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.15 (0+1/7)
# -- panther
computeSimilarity(panther, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.60 (4+4.3/14)
computeSimilarity(panther, gsea, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.82 (9+2.6/14)
computeSimilarity(panther, rs350, GOType = GO, preComputedMatrix = "panther-rs350-MF-sh1", naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.23 (0+3.2/14)
computeSimilarity(panther, rs200, GOType = GO, preComputedMatrix = "panther-rs200-MF-sh1", naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.15 (0+2/14)
# -- gsea
computeSimilarity(gsea, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.37 (3+7.2/28)
computeSimilarity(gsea, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.53 (9+5.8/28)
computeSimilarity(gsea, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.53 (9+5.8/28)
computeSimilarity(gsea, rs350, GOType = GO, preComputedMatrix = "gsea-rs350-MF-sh1", naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.24 (1+5.7/28)
computeSimilarity(gsea, rs200, GOType = GO, preComputedMatrix = "gsea-rs200-MF-sh1", naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.22 (0+6.1/28)
# -- rs350
computeSimilarity(rs350, cp, GOType = GO, preComputedMatrix = "rs350-cp-MF-sh1", naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.02 (0+1.2/57)
computeSimilarity(rs350, panther, GOType = GO, preComputedMatrix = "rs350-panther-MF-sh1", naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.07 (0+4/57)
computeSimilarity(rs350, gsea, GOType = GO, preComputedMatrix = "rs350-gsea-MF-sh1", naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.11 (1+5.5/57)
computeSimilarity(rs350, rs200, GOType = GO, preComputedMatrix = "rs350-rs200-MF-sh1", naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.11 (1+5.2/57)
# -- cp
computeSimilarity(cp, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
path = files_path,
experiment = exp, exportMatrix = F) # 0.81 (4+1.7/7)
# -- cp
computeSimilarity(cp, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.81 (4+1.7/7)
computeSimilarity(cp, rs200, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.15 (0+1/7)
# -- panther
computeSimilarity(panther, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.60 (4+4.3/14)
computeSimilarity(panther, gsea, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.82 (9+2.6/14)
basedir <- "/mnt/hdd0/univ/thesis-support-material/"
setwd(basedir)
source("scripts/4-7/comparison_metric/function.r")
library(readr)
library(dplyr)
exp <- "sh1" # sh1 | linc_ko
pval <- "00001"
setwd(paste0(basedir, "data/4-7/functional_analysis_results/"))
GO <- "BP"
cp <- read_csv(paste0("clusterProfiler/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
panther <- read_csv(paste0("Panther/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
gsea <- read_csv(paste0("GSEA/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
rs350 <- read_csv(paste0("random_samples_goterms/sample350t/revigo/", GO, ".csv"))
rs200 <- read_csv(paste0("random_samples_goterms/sample200t/revigo/", GO, ".csv"))
# the path must end with trailing slash!
files_path = paste0(basedir, "scripts/4-7/comparison_metric/")
# -- cp
computeSimilarity(cp, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.94 (46+15/65) [0.91]
computeSimilarity(cp, gsea, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F)
basedir <- "/mnt/hdd0/univ/thesis-support-material/"
setwd(basedir)
source("function.r")
basedir <- "/mnt/hdd0/univ/thesis-support-material/"
setwd(basedir)
source("scripts/4-7/comparison_metric/function.r")
library(readr)
library(dplyr)
exp <- "linc_ko" # sh1 | linc_ko
pval <- "0001"
setwd(paste0(basedir, "data/4-7/functional_analysis_results/"))
GO <- "BP"
cp <- read_csv(paste0("clusterProfiler/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
panther <- read_csv(paste0("Panther/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
gsea <- read_csv(paste0("GSEA/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
rs50 <- read_csv(paste0("random_samples_goterms/sample50t/revigo/", GO, ".csv"))
# -- cp
computeSimilarity(cp, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.92 (6+2.3/9)
# the path must end with trailing slash!
files_path = paste0(basedir, "scripts/4-7/comparison_metric/")
# -- cp
computeSimilarity(cp, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.92 (6+2.3/9)
computeSimilarity(cp, gsea, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.93 (6+2.3/9)
computeSimilarity(cp, rs50, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.4 (0+3.6/9)
# -- panther
computeSimilarity(panther, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.66 (6+3.2/14)
computeSimilarity(panther, gsea, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.81 (7+4.4/14)
computeSimilarity(panther, rs50, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.38 (0+5.3/14)
# -- gsea
computeSimilarity(gsea, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.32 (6+8.55/45)
computeSimilarity(gsea, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.37 (5+11.8/45)
computeSimilarity(gsea, rs50, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.4 (1+17/45)
# -- rs50
computeSimilarity(rs50, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.17 (0+5.2/30)
computeSimilarity(rs50, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.19 (0+5.7/30)
computeSimilarity(rs50, gsea, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
path = files_path,
experiment = exp, exportMatrix = F) # 0.30 (1+7.9/30)
library(ggcorrplot)
r.cp = c(1, 0.92, 0.93, 0.4)
r.panther = c(0.66, 1, 0.81, 0.38)
r.gsea = c(0.32, 0.37, 1, 0.4)
r.rs50 = c(0.17, 0.19, 0.30, 1)
names <- c("cp", "panther", "gsea", "rs50")
m <- matrix(data = c(r.cp, r.panther, r.gsea, r.rs50),
nrow = length(names), ncol = length(names))
colnames(m) <- names
rownames(m) <- names
ggcorrplot(m, outline.col = "white",
ggtheme = ggplot2::theme_minimal,
colors = c("white", "burlywood3", "brown3"),
lab = T,
show.legend = T,
title = "Values of the comparison metric \nLINC01605 knockout - \"Biological process\" GO terms")
