}
}
part_a <- count
rm(count)
print("done")
# if preComputedMatrix is NULL, then the similarities between the GO terms need to be computed
# otherwise they are imported from the preComputedMatrix file path
simMatrix <- NULL
# GO IDs of the terms belonging to a p cluster not in g
go1 <- (p %>% dplyr::filter(Representative %in% not_in_g$Representative))$TermID
# GO IDs of the terms in g
go2 <- g$TermID
if(length(go1) == 0){
part_b <- 0
} else {
if (is.null(preComputedMatrix)){
print("computing similarity matrix...")
suppressPackageStartupMessages(suppressWarnings(suppressMessages(library(GOSemSim))))
hsGO <- NULL
setwd(precomputed_hs_path)
if(GOType == "BP"){
hsGO <- readRDS(file = "bp.rds")
} else if(GOType == "MF"){
hsGO <- readRDS(file = "mf.rds")
} else if(GOType == "CC"){
hsGO <- readRDS(file = "cc.rds")
} else {
print("Error: Unknown GOType")
exit()
}
#hsGO <- godata('org.Hs.eg.db', ont=GOType, computeIC=T)
# computing the preComputedMatrix  between GO terms
simMatrix <- NULL
if (naiveMatrixCompute){
print("using inefficient way to compute similarity Matrix")
simMatrix <- matrix(data = 0, nrow = length(go1), ncol = length(go2))
for (i in 1:nrow(simMatrix)) {
for (j in 1:ncol(simMatrix)){
simMatrix[i,j] <- goSim(go1[i], go2[j], semData=hsGO, measure="Rel")
}
print(paste0("computing row ", i, " of ", nrow(simMatrix)))
}
if(exportMatrix == T){
setwd(precomputed_matrix_path)
print("exporting computed matrix")
a <- deparse(substitute(first))
b <- deparse(substitute(second))
saveRDS(simMatrix, file = paste0(a,"-", b, "-", GOType, "-", experiment))
rm(a,b)
}
} else {
print("using efficient way to compute similarity Matrix")
simMatrix <- mgoSim(go1, go2, semData=hsGO, measure="Rel", combine=NULL)
}
} else {
print("importing similarities matrix...")
setwd(precomputed_matrix_path)
simMatrix <- readRDS(file = preComputedMatrix)
}
simMatrix[is.na(simMatrix)] <- 0
rownames(simMatrix) <- go1
colnames(simMatrix) <- go2
print("done")
rm(go1, go2)
#print(simMatrix)
# computing the second part of the score
print("computing the second part of the score...")
sim.threshold <- 0.1
score <- 0
g_clusters <- g %>% filter(Eliminated == F)
for(i in 1:nrow(not_in_g)){
code <- not_in_g[i,]$code
friends <- p %>% filter(Representative == !!code)
max_mean_similarity <- 0
max_g_cluster_code <- 0
for(j in 1:nrow(g_clusters)){
g_cluster_code <- g_clusters[j,]$code
g_cluster_friends <- g %>% filter(Representative == !!g_cluster_code)
similarity_values <- c()
for(k in 1:nrow(friends)){
for(h in 1:nrow(g_cluster_friends)){
value <- simMatrix[friends[[k,1]], g_cluster_friends[[h,1]] ]
if (is.na(value)){
#print("warning: NA generated, replaced with 0")
value <- 0
}
similarity_values <- c(similarity_values, value)
}
}
mean_similarity <- mean(similarity_values)
if (mean_similarity > max_mean_similarity) {
max_mean_similarity <- mean_similarity
max_g_cluster_code <- g_cluster_code
}
}
if(max_mean_similarity >= sim.threshold){
score <- score + max_mean_similarity
#print(paste0(code, " ~ ", max_g_cluster_code, " : ", max_mean_similarity))
}
print(paste0((i)/nrow(not_in_g)*100, " %..."))
}
part_b <- score
rm(score)
print("done")
rm(similarity_values, mean_similarity, i, j, k, h)
rm(sim.threshold, value)
rm(friends, code, max_mean_similarity)
rm(g_cluster_code, g_cluster_friends, g_clusters, max_g_cluster_code)
}
scale.factor <- 1
representatives <- (p %>% dplyr::filter(Eliminated == F) %>% count())$n
print(paste0("first part: ", part_a, " / ", representatives))
print(paste0("second part: ", part_b, " / ", representatives))
score <- (part_a + part_b)/representatives
print(paste0("final score: ", score))
return(score)
}
setwd("/mnt/hdd0/univ/lab2/05-10/listSimilarity")
source("function_mean.r")
library(readr)
library(dplyr)
exp <- "sh1" # sh1 | linc_ko
pval <- "00001"
setwd("/mnt/hdd0/univ/lab2/")
GO <- "BP"
cp <- read_csv(paste0("05-10/clusterProfiler/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
panther <- read_csv(paste0("05-10/Panther/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
gsea <- read_csv(paste0("05-10/GSEA/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
rs350 <- read_csv(paste0("05-10/random_samples_goterms/sample350t/revigo/", GO, ".csv"))
rs200 <- read_csv(paste0("05-10/random_samples_goterms/sample200t/revigo/", GO, ".csv"))
# -- cp
computeSimilarity(cp, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) # 0.94 (46+15/65)
computeSimilarity(cp, gsea, GOType = GO, preComputedMatrix = "cp-gsea-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.79 (24+27/65)
computeSimilarity(cp, rs350, GOType = GO, preComputedMatrix = "cp-rs350-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.54 (0+35/65)
computeSimilarity(cp, rs200, GOType = GO, preComputedMatrix = "cp-rs200-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.52 (1+32/65)
# -- panther
computeSimilarity(panther, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) # 0.78 (48+52/129)
computeSimilarity(panther, gsea, GOType = GO, preComputedMatrix = "panther-gsea-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.85 (59+51/129)
computeSimilarity(panther, rs350, GOType = GO, preComputedMatrix = "panther-rs350-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.55 (1+70/129)
computeSimilarity(panther, rs200, GOType = GO, preComputedMatrix = "panther-rs200-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.53 (1+68/129)
# -- gsea
computeSimilarity(gsea, cp, GOType = GO, preComputedMatrix = "gsea-cp-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.58 (24+74/169)
# GOType must be "BP", "MF", "CC"
computeSimilarity <- function(first,
second,
GOType,
preComputedMatrix = NULL,
naiveMatrixCompute = F,
precomputed_hs_path = "/mnt/hdd0/univ/lab2/05-10/listSimilarity/precomputed_hs",
precomputed_matrix_path = "/mnt/hdd0/univ/lab2/05-10/listSimilarity/precomputed_matrix",
exportMatrix = F,
experiment){
# setting frequency threshold to discard uninformative GO terms
freq.threshold <- 16
p <- first %>%
dplyr::filter(Frequency < freq.threshold) %>%
dplyr::mutate(code = as.numeric(substr(TermID, 4, 999))) %>%
dplyr::mutate(Representative = ifelse(Representative == -1, code, Representative))
g <- second %>%
dplyr::filter(Frequency < freq.threshold) %>%
dplyr::mutate(code = as.numeric(substr(TermID, 4, 999))) %>%
dplyr::mutate(Representative = ifelse(Representative == -1, code, Representative))
# computing first part of the score
print("computing the first part of the score...")
count <- 0
not_in_g <- p %>% dplyr::filter(TermID == 1) # empty
for(i in 1:nrow(p)){
# only consider the leader
if(p[i,]$Eliminated == F){
# considering now all the terms in its cluster
code <- p[i,]$code
friends <- p %>% dplyr::filter(Representative == !!code)
#friends <- p[p$Representative == code, ]
# checking if in g exists one of the terms in the cluster of i
res <- friends %>% dplyr::inner_join(g, by = c("TermID" = "TermID")) %>% nrow()
if (res > 0) {
count <- count + 1
} else {
not_in_g <- rbind(not_in_g, p[i,])
}
rm(code, friends, res)
}
}
part_a <- count
rm(count)
print("done")
# if preComputedMatrix is NULL, then the similarities between the GO terms need to be computed
# otherwise they are imported from the preComputedMatrix file path
simMatrix <- NULL
# GO IDs of the terms belonging to a p cluster not in g
go1 <- (p %>% dplyr::filter(Representative %in% not_in_g$Representative))$TermID
# GO IDs of the terms in g
go2 <- g$TermID
if(length(go1) == 0){
part_b <- 0
} else {
if (is.null(preComputedMatrix)){
print("computing similarity matrix...")
suppressPackageStartupMessages(suppressWarnings(suppressMessages(library(GOSemSim))))
hsGO <- NULL
setwd(precomputed_hs_path)
if(GOType == "BP"){
hsGO <- readRDS(file = "bp.rds")
} else if(GOType == "MF"){
hsGO <- readRDS(file = "mf.rds")
} else if(GOType == "CC"){
hsGO <- readRDS(file = "cc.rds")
} else {
print("Error: Unknown GOType")
exit()
}
#hsGO <- godata('org.Hs.eg.db', ont=GOType, computeIC=T)
# computing the preComputedMatrix  between GO terms
simMatrix <- NULL
if (naiveMatrixCompute){
print("using inefficient way to compute similarity Matrix")
simMatrix <- matrix(data = 0, nrow = length(go1), ncol = length(go2))
for (i in 1:nrow(simMatrix)) {
for (j in 1:ncol(simMatrix)){
simMatrix[i,j] <- goSim(go1[i], go2[j], semData=hsGO, measure="Rel")
}
print(paste0("computing row ", i, " of ", nrow(simMatrix)))
}
if(exportMatrix == T){
setwd(precomputed_matrix_path)
print("exporting computed matrix")
a <- deparse(substitute(first))
b <- deparse(substitute(second))
saveRDS(simMatrix, file = paste0(a,"-", b, "-", GOType, "-", experiment))
rm(a,b)
}
} else {
print("using efficient way to compute similarity Matrix")
simMatrix <- mgoSim(go1, go2, semData=hsGO, measure="Rel", combine=NULL)
}
} else {
print("importing similarities matrix...")
setwd(precomputed_matrix_path)
simMatrix <- readRDS(file = preComputedMatrix)
}
simMatrix[is.na(simMatrix)] <- 0
rownames(simMatrix) <- go1
colnames(simMatrix) <- go2
print("done")
rm(go1, go2)
#print(simMatrix)
# computing the second part of the score
print("computing the second part of the score...")
sim.threshold <- 0.1
score <- 0
g_clusters <- g %>% filter(Eliminated == F)
for(i in 1:nrow(not_in_g)){
code <- not_in_g[i,]$code
friends <- p %>% filter(Representative == !!code)
max_mean_similarity <- 0
max_g_cluster_code <- 0
for(j in 1:nrow(g_clusters)){
g_cluster_code <- g_clusters[j,]$code
g_cluster_friends <- g %>% filter(Representative == !!g_cluster_code)
similarity_values <- c()
for(k in 1:nrow(friends)){
for(h in 1:nrow(g_cluster_friends)){
value <- simMatrix[friends[[k,1]], g_cluster_friends[[h,1]] ]
if (is.na(value)){
#print("warning: NA generated, replaced with 0")
value <- 0
}
similarity_values <- c(similarity_values, value)
}
}
mean_similarity <- mean(similarity_values)
if (mean_similarity > max_mean_similarity) {
max_mean_similarity <- mean_similarity
max_g_cluster_code <- g_cluster_code
}
}
if(max_mean_similarity >= sim.threshold){
score <- score + max_mean_similarity
#print(paste0(code, " ~ ", max_g_cluster_code, " : ", max_mean_similarity))
}
#print(paste0((i)/nrow(not_in_g)*100, " %..."))
}
part_b <- score
rm(score)
print("done")
rm(similarity_values, mean_similarity, i, j, k, h)
rm(sim.threshold, value)
rm(friends, code, max_mean_similarity)
rm(g_cluster_code, g_cluster_friends, g_clusters, max_g_cluster_code)
}
scale.factor <- 1
representatives <- (p %>% dplyr::filter(Eliminated == F) %>% count())$n
print(paste0("first part: ", part_a, " / ", representatives))
print(paste0("second part: ", part_b, " / ", representatives))
score <- (part_a + part_b)/representatives
print(paste0("final score: ", score))
return(score)
}
computeSimilarity(gsea, cp, GOType = GO, preComputedMatrix = "gsea-cp-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.58 (24+74/169) [0.52]
computeSimilarity(gsea, panther, GOType = GO, preComputedMatrix = "gsea-panther-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.75 (59+68/169)
computeSimilarity(gsea, rs350, GOType = GO, preComputedMatrix = "gsea-rs350-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.56 (4+90/169)
computeSimilarity(gsea, rs200, GOType = GO, preComputedMatrix = "gsea-rs200-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.51 (3+84/169)
# -- rs350
computeSimilarity(rs350, cp, GOType = GO, preComputedMatrix = "rs350-cp-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.23 (0+37/159)
computeSimilarity(rs350, panther, GOType = GO, preComputedMatrix = "rs350-panther-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.28 (1+43/159)
computeSimilarity(rs350, gsea, GOType = GO, preComputedMatrix = "rs350-gsea-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.30 (4+44/159)
computeSimilarity(rs350, rs200, GOType = GO, preComputedMatrix = "rs350-rs200-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.24 (2+36/159)
# -- rs200
computeSimilarity(rs200, cp, GOType = GO, preComputedMatrix = "rs200-cp-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.24 (1+24/104)
computeSimilarity(rs200, panther, GOType = GO, preComputedMatrix = "rs200-panther-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.28 (1+28/104)
computeSimilarity(rs200, gsea, GOType = GO, preComputedMatrix = "rs200-gsea-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.31 (3+29/104)
computeSimilarity(rs200, rs350, GOType = GO, preComputedMatrix = "rs200-rs350-BP-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.28 (2+27/104)
library(ggcorrplot)
r.cp = c(1, 0.94, 0.79, 0.54, 0.52)
r.panther = c(0.78, 1, 0.79, 0.54, 0.52)
r.gsea = c(0.58, 0.75, 1, 0.56, 0.51)
r.rs350 = c(0.23, 0.28, 0.30, 1, 0.24)
r.rs200 = c(0.24, 0.28, 0.31, 0.28, 1)
names <- c("cp", "panther", "gsea", "rs350", "rs200")
m <- matrix(data = c(r.cp, r.panther, r.gsea, r.rs350, r.rs200),
nrow = length(names), ncol = length(names))
colnames(m) <- names
rownames(m) <- names
ggcorrplot(m, outline.col = "white",
ggtheme = ggplot2::theme_minimal,
colors = c("white", "burlywood3", "brown3"),
lab = T,
show.legend = T)
setwd("/mnt/hdd0/univ/lab2/")
GO <- "MF"
cp <- read_csv(paste0("05-10/clusterProfiler/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
panther <- read_csv(paste0("05-10/Panther/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
gsea <- read_csv(paste0("05-10/GSEA/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
rs350 <- read_csv(paste0("05-10/random_samples_goterms/sample350t/revigo/", GO, ".csv"))
rs200 <- read_csv(paste0("05-10/random_samples_goterms/sample200t/revigo/", GO, ".csv"))
rm(m)
setwd("/mnt/hdd0/univ/lab2/05-10/listSimilarity")
source("function.r")
# -- cp
computeSimilarity(cp, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
computeSimilarity(cp, gsea, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
computeSimilarity(cp, rs350, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
computeSimilarity(cp, rs200, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
# -- cp
computeSimilarity(cp, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) #
computeSimilarity(cp, rs350, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) #
computeSimilarity(cp, rs350, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = T) #
computeSimilarity(cp, rs350, GOType = GO, preComputedMatrix = "cp-rs350-MF-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = T) # 0.10 (0+0.7/7)
computeSimilarity(cp, rs200, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
computeSimilarity(cp, rs200, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) #
# -- panther
computeSimilarity(panther, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
computeSimilarity(panther, gsea, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
computeSimilarity(panther, rs350, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
computeSimilarity(panther, rs200, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
# -- panther
computeSimilarity(panther, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) #
computeSimilarity(panther, gsea, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) #
computeSimilarity(panther, rs350, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) #
computeSimilarity(panther, rs350, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = T) #
computeSimilarity(panther, rs350, GOType = GO, preComputedMatrix = "panther-rs350-MF-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.23 (0+3.2/14)
computeSimilarity(panther, rs200, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) #
computeSimilarity(panther, rs200, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = T) #
computeSimilarity(panther, rs200, GOType = GO, preComputedMatrix = "panther-rs200-MF-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.15 (0+2/14)
# -- gsea
computeSimilarity(gsea, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
computeSimilarity(gsea, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
computeSimilarity(gsea, rs350, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
computeSimilarity(gsea, rs200, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
computeSimilarity(gsea, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) #
computeSimilarity(gsea, rs350, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) #
computeSimilarity(gsea, rs350, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = T) #
computeSimilarity(gsea, rs350, GOType = GO, preComputedMatrix = "gsea-rs350-MF-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.24 (1+5.7/28)
computeSimilarity(gsea, rs200, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = T) #
computeSimilarity(gsea, rs200, GOType = GO, preComputedMatrix = "gsea-rs200-MF-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.22 (0+6.1/28)
# -- rs350
computeSimilarity(rs350, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
computeSimilarity(rs350, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
computeSimilarity(rs350, gsea, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
computeSimilarity(rs350, rs200, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
# -- rs350
computeSimilarity(rs350, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) #
# -- rs350
computeSimilarity(rs350, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = T) #
# -- rs350
computeSimilarity(rs350, cp, GOType = GO, preComputedMatrix = "rs350-cp-MF-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.02 (0+1.2/57)
computeSimilarity(rs350, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) #
computeSimilarity(rs350, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = T) #
computeSimilarity(rs350, panther, GOType = GO, preComputedMatrix = "rs350-panther-MF-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.07 (0+4/57)
computeSimilarity(rs350, gsea, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) #
computeSimilarity(rs350, gsea, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = T) #
computeSimilarity(rs350, gsea, GOType = GO, preComputedMatrix = "rs350-gsea-MF-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.11 (1+5.5/57)
computeSimilarity(rs350, rs200, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) #
computeSimilarity(rs350, rs200, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = T) #
computeSimilarity(rs350, rs200, GOType = GO, preComputedMatrix = "rs350-rs200-MF-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.11 (1+5.2/57)
# -- rs200
computeSimilarity(rs200, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
computeSimilarity(rs200, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
computeSimilarity(rs200, gsea, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
computeSimilarity(rs200, rs350, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F) #
# -- rs200
computeSimilarity(rs200, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) #
# -- rs200
computeSimilarity(rs200, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = T) #
# -- rs200
computeSimilarity(rs200, cp, GOType = GO, preComputedMatrix = "rs200-cp-MF-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.05 (0+1.7/35)
computeSimilarity(rs200, panther, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = T) #
computeSimilarity(rs200, panther, GOType = GO, preComputedMatrix = "rs200-panther-MF-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.09 (0+3/35)
computeSimilarity(rs200, gsea, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = T) #
computeSimilarity(rs200, rs350, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = T) #
computeSimilarity(rs200, rs350, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = T,
experiment = exp, exportMatrix = T) #
computeSimilarity(rs200, rs350, GOType = GO, preComputedMatrix = "rs200-rs350-MF-sh1", naiveMatrixCompute = T,
experiment = exp, exportMatrix = F) # 0.16 (1+4.5/35)
library(ggcorrplot)
r.cp = c(1, 0.81, 0.75, 0.10, 0.15)
r.panther = c(0.6, 1, 0.82, 0.23, 0.15)
r.gsea = c(0.37, 0.53, 1, 0.24, 0.22)
r.rs350 = c(0.02, 0.07, 0.11, 1, 0.11)
r.rs200 = c(0.05, 0.09, 0.15, 0.16, 1)
names <- c("cp", "panther", "gsea", "rs350", "rs200")
m <- matrix(data = c(r.cp, r.panther, r.gsea, r.rs350, r.rs200),
nrow = length(names), ncol = length(names))
colnames(m) <- names
rownames(m) <- names
ggcorrplot(m, outline.col = "white",
ggtheme = ggplot2::theme_minimal,
colors = c("white", "burlywood3", "brown3"),
lab = T,
show.legend = T)
computeSimilarity(cp, cp, GOType = GO, preComputedMatrix = NULL, naiveMatrixCompute = F,
experiment = exp, exportMatrix = F)
