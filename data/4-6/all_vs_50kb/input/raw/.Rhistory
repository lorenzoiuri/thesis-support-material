}
}
if(max_mean_similarity >= sim.threshold){
score <- score + max_mean_similarity
print(paste0(code, " ~ ", max_g_cluster_code, " : ", max_mean_similarity))
}
}
sim.threshold <- 0.1
score <- 0
g_clusters <- g %>% filter(Eliminated == F)
for(i in 1:nrow(not_in_g)){
code <- not_in_g[i,]$code
friends <- p %>% filter(Representative == !!code)
max_mean_similarity <- 0
max_g_cluster_code <- 0
for(j in 1:nrow(g_clusters)){
g_cluster_code <- g_clusters[j,]$code
g_cluster_friends <- g %>% filter(Representative == !!g_cluster_code)
similarity_max_values <- c()
for(k in 1:nrow(friends)){
similarity_values <- c()
for(h in 1:nrow(g_cluster_friends)){
value <- simMatrix[friends[[k,1]], g_cluster_friends[[h,1]] ]
if (is.na(value)){
print("warning: NA generated, replaced with 0")
value <- 0
}
similarity_values <- c(similarity_values, value)
}
similarity_max_values <- c(similarity_max_values, max(similarity_values))
}
mean_similarity <- mean(similarity_max_values)
if (mean_similarity > max_mean_similarity) {
max_mean_similarity <- mean_similarity
max_g_cluster_code <- g_cluster_code
}
}
if(max_mean_similarity >= sim.threshold){
score <- score + max_mean_similarity
print(paste0(code, " ~ ", max_g_cluster_code, " : ", max_mean_similarity))
}
}
rm(similarity_values, similarity_max_values, mean_similarity, i, j, k, h)
rm(scale.factor, sim.threshold, value)
rm(friends, code, max_mean_similarity)
rm(g_cluster_code, g_cluster_friends, g_clusters, max_g_cluster_code)
scale.factor <- 1
representatives <- (p %>% dplyr::filter(Eliminated == F) %>% count())$n
part_a <- c / representatives
part_b <- score*scale.factor / representatives
part_a + part_b
panther
p
p %>% group_by(Representative)
g %>% group_by(Representative)
# counting the number of clusters in p also present in g
count <- 0
not_in_g <- p %>% filter(TermID == 0) # empty
for(i in 1:nrow(p)){
# only consider the cluster representatives
if(p[i,]$Eliminated == F){
# considering now all the terms in p[i,]'s cluster
code <- p[i,]$code
friends <- p %>% filter(Representative == !!code)
# checking if in g exists one of the terms in the cluster of i
res <- friends %>% inner_join(g, by = c("TermID" = "TermID")) %>% nrow()
if (res > 0) {
count <- count+1
} else {
# adding p[i,] to the clusters in p but not in g
not_in_g <- rbind(not_in_g, p[i,])
}
rm(code, friends, res)
}
}
score
rm(c=)
rm(c)
library(readr)
library(dplyr)
# importing the GO terms clustered by revigo
panther <- read_csv("05-03/TP53sil/Deseq2+Panther/Panther-results/pval00001/onlynames/Revigo/MF.csv")
GSEA <- read_csv("05-03/TP53sil/GSEA/GO_terms/pval00001/Revigo/MF.csv")
# setting threshold to avoid considering the non informative terms
freq.threshold <- 16
p <- panther %>%
filter(Frequency < freq.threshold) %>%
mutate(code = as.numeric(substr(TermID, 4, 999))) %>%
mutate(Representative = ifelse(Representative == -1, code, Representative))
g <- GSEA %>%
filter(Frequency < freq.threshold) %>%
mutate(code = as.numeric(substr(TermID, 4, 999))) %>%
mutate(Representative = ifelse(Representative == -1, code, Representative))
rm(freq.threshold)
# counting the number of clusters in p also present in g
count <- 0
not_in_g <- p %>% filter(TermID == 0) # empty
for(i in 1:nrow(p)){
# only consider the cluster representatives
if(p[i,]$Eliminated == F){
# considering now all the terms in p[i,]'s cluster
code <- p[i,]$code
friends <- p %>% filter(Representative == !!code)
# checking if in g exists one of the terms in the cluster of i
res <- friends %>% inner_join(g, by = c("TermID" = "TermID")) %>% nrow()
if (res > 0) {
count <- count+1
} else {
# adding p[i,] to the clusters in p but not in g
not_in_g <- rbind(not_in_g, p[i,])
}
rm(code, friends, res)
}
}
library(GOSemSim)
hsGO <- godata('org.Hs.eg.db', ont="MF", computeIC=T)
library(readr)
library(dplyr)
sample1 <- read_csv("05-03/comparison_tool/Random-samples/BP/sample1-revigo_BP.csv")
sample2 <- read_csv("05-03/comparison_tool/Random-samples/BP/sample2-revigo_BP.csv")
simMatrix_BP <- as.matrix(read.table("/mnt/hdd0/univ/lab2/05-03/comparison_tool/Random-samples/BP/simMatrix_BP.txt",
row.names=NULL, quote="", comment.char="", stringsAsFactors=FALSE))
computeSimilarity(sample1, sample2, GOType = "BP", similarities = simMatrix_BP)
# GOType must be "BP", "MF", "CC"
computeSimilarity <- function(first, second, GOType, similarities = NULL){
# setting frequency threshold to discard uninformative GO terms
freq.threshold <- 16
p <- first %>%
dplyr::filter(Frequency < freq.threshold) %>%
dplyr::mutate(code = as.numeric(substr(TermID, 4, 999))) %>%
dplyr::mutate(Representative = ifelse(Representative == -1, code, Representative))
g <- second %>%
dplyr::filter(Frequency < freq.threshold) %>%
dplyr::mutate(code = as.numeric(substr(TermID, 4, 999))) %>%
dplyr::mutate(Representative = ifelse(Representative == -1, code, Representative))
# computing first part of the score
print("computing first part...")
count <- 0
not_in_g <- p %>% dplyr::filter(TermID == 1) # empty
for(i in 1:nrow(p)){
# only consider the leader
if(p[i,]$Eliminated == F){
# considering now all the terms in its cluster
code <- p[i,]$code
friends <- p %>% dplyr::filter(Representative == !!code)
#friends <- p[p$Representative == code, ]
# checking if in g exists one of the terms in the cluster of i
res <- friends %>% dplyr::inner_join(g, by = c("TermID" = "TermID")) %>% nrow()
if (res > 0) {
count <- count + 1
} else {
not_in_g <- rbind(not_in_g, p[i,])
}
rm(code, friends, res)
}
}
part_a <- count
rm(count)
print("done")
# if similarities is NULL, then the similarities between the GO terms need to be computed
# otherwise they are imported from the similarities file path
simMatrix <- NULL
# GO IDs of the terms belonging to a p cluster not in g
go1 <- (p %>% dplyr::filter(Representative %in% not_in_g$Representative))$TermID
# GO IDs of the terms in g
go2 <- g$TermID
if (is.null(similarities)){
print("computing similarity matrix...")
suppressWarnings(suppressMessages(library(GOSemSim)))
hsGO <- godata('org.Hs.eg.db', ont=GOType, computeIC=T)
# computing the similarity matrix between GO terms
simMatrix <- mgoSim(go1, go2, semData=hsGO, measure="Rel", combine=NULL)
} else {
print("importing similarities matrix...")
simMatrix <- similarities
}
simMatrix[is.na(simMatrix)] <- 0
rownames(simMatrix) <- go1
colnames(simMatrix) <- go2
print("done")
rm(go1, go2)
# computing the second part of the score
print("computing second part of the score...")
sim.threshold <- 0.1
score <- 0
g_clusters <- g %>% filter(Eliminated == F)
for(i in 1:nrow(not_in_g)){
code <- not_in_g[i,]$code
friends <- p %>% filter(Representative == !!code)
max_mean_similarity <- 0
max_g_cluster_code <- 0
for(j in 1:nrow(g_clusters)){
g_cluster_code <- g_clusters[j,]$code
g_cluster_friends <- g %>% filter(Representative == !!g_cluster_code)
similarity_max_values <- c()
for(k in 1:nrow(friends)){
similarity_values <- c()
for(h in 1:nrow(g_cluster_friends)){
value <- simMatrix[friends[[k,1]], g_cluster_friends[[h,1]] ]
if (is.na(value)){
#print("warning: NA generated, replaced with 0")
value <- 0
}
similarity_values <- c(similarity_values, value)
}
similarity_max_values <- c(similarity_max_values, max(similarity_values))
}
mean_similarity <- mean(similarity_max_values)
if (mean_similarity > max_mean_similarity) {
max_mean_similarity <- mean_similarity
max_g_cluster_code <- g_cluster_code
}
}
if(max_mean_similarity >= sim.threshold){
score <- score + max_mean_similarity
#print(paste0(code, " ~ ", max_g_cluster_code, " : ", max_mean_similarity))
}
}
part_b <- score
rm(score)
print("done")
rm(similarity_values, similarity_max_values, mean_similarity, i, j, k, h)
rm(sim.threshold, value)
rm(friends, code, max_mean_similarity)
rm(g_cluster_code, g_cluster_friends, g_clusters, max_g_cluster_code)
scale.factor <- 1
representatives <- (p %>% dplyr::filter(Eliminated == F) %>% count())$n
print(paste0("first part: ", part_a, " / ", representatives))
print(paste0("second part: ", part_b, " / ", representatives))
score <- (part_a + part_b)/representatives
print(paste0("final score ", score))
return(score)
}
computeSimilarity(sample1, sample2, GOType = "BP", similarities = simMatrix_BP)
k = 500
pc = 650/20000
observed = 30
observed:k
5^3
k = 500
pc = 650/20000
observed = 30
p <- 0
for(i in observed:k){
choose(k,i) * pc^i * (1-pc)^(k-i)
}
p <- 0
for(i in observed:k){
p <- p + choose(k,i) * pc^i * (1-pc)^(k-i)
}
observed = 16
p <- 0
for(i in observed:k){
p <- p + choose(k,i) * pc^i * (1-pc)^(k-i)
}
observed = 16.5
p <- 0
for(i in observed:k){
p <- p + choose(k,i) * pc^i * (1-pc)^(k-i)
}
observed = 16
p <- 0
for(i in observed:k){
p <- p + choose(k,i) * pc^i * (1-pc)^(k-i)
}
observed = 16.2
p <- 0
for(i in observed:k){
p <- p + choose(k,i) * pc^i * (1-pc)^(k-i)
}
pc*500
observed = 16.25
p <- 0
for(i in observed:k){
p <- p + choose(k,i) * pc^i * (1-pc)^(k-i)
}
observed = 16.25
p <- 0
for(i in observed:k){
p <- p + choose(k,i) * pc^i * (1-pc)^(k-i)
}
warnings()
observed = 16
p <- 0
for(i in observed:k){
p <- p + choose(k,i) * pc^i * (1-pc)^(k-i)
}
observed = 17
p <- 0
for(i in observed:k){
p <- p + choose(k,i) * pc^i * (1-pc)^(k-i)
}
observed = 20
p <- 0
for(i in observed:k){
p <- p + choose(k,i) * pc^i * (1-pc)^(k-i)
}
observed = 30
p <- 0
for(i in observed:k){
p <- p + choose(k,i) * pc^i * (1-pc)^(k-i)
}
observed = 300
p <- 0
for(i in observed:k){
p <- p + choose(k,i) * pc^i * (1-pc)^(k-i)
}
observed = 60
p <- 0
for(i in observed:k){
p <- p + choose(k,i) * pc^i * (1-pc)^(k-i)
}
k = 500
pc = 650/20000
pc * k
observed = 60
p <- 0
for(i in observed:k){
p <- p + choose(k,i) * pc^i * (1-pc)^(k-i)
}
k = 500
pc = 650/20000
observed = 30
p <- 0
for(i in observed:k){
p <- p + choose(k,i) * pc^i * (1-pc)^(k-i)
}
setwd("/mnt/hdd0/univ/lab2/05-10/listSimilarity")
source("function.r")
library(readr)
library(dplyr)
exp <- "sh1" # sh1 | linc_ko
pval <- "00001"
setwd("/mnt/hdd0/univ/lab2/")
GO <- "BP"
cp <- read_csv(paste0("05-10/clusterProfiler/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
panther <- read_csv(paste0("05-10/Panther/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
gsea <- read_csv(paste0("05-10/GSEA/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
rs350 <- read_csv(paste0("05-10/random_samples_goterms/sample350t/revigo/", GO, ".csv"))
rs200 <- read_csv(paste0("05-10/random_samples_goterms/sample200t/revigo/", GO, ".csv"))
library(ggcorrplot)
r.cp = c(1, 0.94, 0.79, 0.54, 0.52)
r.panther = c(0.78, 1, 0.79, 0.54, 0.52)
r.gsea = c(0.58, 0.75, 1, 0.56, 0.51)
r.rs350 = c(0.23, 0.28, 0.30, 1, 0.24)
r.rs200 = c(0.24, 0.28, 0.31, 0.28, 1)
names <- c("cp", "panther", "gsea", "rs350", "rs200")
m <- matrix(data = c(r.cp, r.panther, r.gsea, r.rs350, r.rs200),
nrow = length(names), ncol = length(names))
colnames(m) <- names
rownames(m) <- names
ggcorrplot(m, outline.col = "white",
ggtheme = ggplot2::theme_minimal,
colors = c("white", "burlywood3", "brown3"),
lab = T,
show.legend = T)
library(ggcorrplot)
r.cp = c(1, 0.81, 0.75, 0.10, 0.15)
r.panther = c(0.6, 1, 0.82, 0.23, 0.15)
r.gsea = c(0.37, 0.53, 1, 0.24, 0.22)
r.rs350 = c(0.02, 0.07, 0.11, 1, 0.11)
r.rs200 = c(0.05, 0.09, 0.15, 0.16, 1)
names <- c("cp", "panther", "gsea", "rs350", "rs200")
m <- matrix(data = c(r.cp, r.panther, r.gsea, r.rs350, r.rs200),
nrow = length(names), ncol = length(names))
colnames(m) <- names
rownames(m) <- names
ggcorrplot(m, outline.col = "white",
ggtheme = ggplot2::theme_minimal,
colors = c("white", "burlywood3", "brown3"),
lab = T,
show.legend = T)
library(ggcorrplot)
r.cp = c(1, 0.92, 0.93, 0.4)
r.panther = c(0.66, 1, 0.81, 0.38)
r.gsea = c(0.32, 0.37, 1, 0.4)
r.rs50 = c(0.17, 0.19, 0.30, 1)
names <- c("cp", "panther", "gsea", "rs50")
m <- matrix(data = c(r.cp, r.panther, r.gsea, r.rs50),
nrow = length(names), ncol = length(names))
colnames(m) <- names
rownames(m) <- names
ggcorrplot(m, outline.col = "white",
ggtheme = ggplot2::theme_minimal,
colors = c("white", "burlywood3", "brown3"),
lab = T,
show.legend = T)
View(cp)
cp %>% filter()
cp %>% filter(Eliminated == F)
panther %>% filter(Eliminated == F)
gsea %>% filter(Eliminated == F)
rs350 %>% filter(Eliminated == F)
rs20 %>% filter(Eliminated == F)
rs200 %>% filter(Eliminated == F)
setwd("/mnt/hdd0/univ/lab2/05-10/listSimilarity")
source("function.r")
library(readr)
library(dplyr)
exp <- "linc_ko" # sh1 | linc_ko
pval <- "0001"
setwd("/mnt/hdd0/univ/lab2/")
GO <- "BP"
cp <- read_csv(paste0("05-10/clusterProfiler/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
panther <- read_csv(paste0("05-10/Panther/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
gsea <- read_csv(paste0("05-10/GSEA/", exp, "/pval", pval, "/revigo/", GO, ".csv"))
rs50 <- read_csv(paste0("05-10/random_samples_goterms/sample50t/revigo/", GO, ".csv"))
cp %>% filter(Eliminated == F)
panther %>% filter(Eliminated == F)
gsea %>% filter(Eliminated == F)
rs50 %>% filter(Eliminated == F)
View(rs50)
setwd("/mnt/hdd0/univ/thesis-support-material/data/4-5")
library(readr)
library(dplyr)
library(ggplot2)
n_h3k27ac <- 58201
data.frame(sites = rep(c("p53", "random 1", "random 2", "random 3") , 2),
value = c(7256, 353, 376, 344)) %>%
ggplot(mapping = aes(x = sites, y = value, fill = sites)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("coral3", "dodgerblue1", "dodgerblue2", "dodgerblue3")) +
geom_text(aes(label = value), vjust=-0.5, size=5, color = "black", position = position_dodge(0.9)) +
geom_text(aes(label = paste0(format(round(value/n_h3k27ac*100, 1), nsmall = 1), "%")),
vjust=1.5, size=4, color = "white", position = position_dodge(0.9)) +
theme_minimal() +
theme(legend.position = c(0.9,0.85)) +
labs(title = "Number of H3K27ac sites containing a p53 binding site", x = "", y = "Sites")
genes_within_1MB <- read_table2("question1/3-genes_within_1MB_from_1/a-genes_within_1MB/genes_within_1MB.txt",
col_names = FALSE)
# importing the DE genes in sh1 vs shNT and in sh2 vs shNT, then keeping only those DE in both experiments
DE_common_sh1 <- read_delim("/mnt/hdd0/univ/thesis-support-material/data/4-4/sites-on-DE-genes/genes/DE_common_sh1_namepos.bed",
"\t", escape_double = FALSE, col_names = FALSE, trim_ws = TRUE)
DE_common_sh2 <- read_delim("/mnt/hdd0/univ/thesis-support-material/data/4-4/sites-on-DE-genes/genes/DE_common_sh2_namepos.bed",
"\t", escape_double = FALSE, col_names = FALSE, trim_ws = TRUE)
DE_sh1sh2 <- (DE_common_sh1 %>% inner_join(DE_common_sh2))
genes_within_1MB <- genes_within_1MB %>%
mutate(isDE = X8 %in% DE_sh1sh2$X4)
colnames(genes_within_1MB) <- c("chr_h", "start_h", "end_h", "region_name",
"chr_g", "start_g", "end_g", "gene_name",
"nd", "gene_strand", "distance", "isGeneDE" )
genes_within_1MB
genes_within_1MB %>% dplyr::filter(isGeneDE == T)
file:///mnt/hdd0/univ/thesis-support-material/data/4-6/TP53_results_assessment/GSEA
genes_within_1MB
genes_within_1MB %>% group_by(gene_name)
genes_within_1MB %>% dplyr::filter(isGeneDE == T)
genes_within_1MB %>% dplyr::filter(isGeneDE == T) %>% group_by(gene_name)
genes_within_1MB
DE_sh1sh2
genes_within_1MB %>% dplyr::filter(isGeneDE == T) %>% group_by(gene_name)
genes_within_50KB <- read_table2("question1/4-genes_within_50KB_from_1/a-genes_within_50KB/genes_within_50KB.txt",
col_names = FALSE)
genes_within_50KB <- read_table2("question1/4-genes_within_50KB_from_1/genes_within_50KB/genes_within_50KB.txt",
col_names = FALSE)
genes_within_50KB <- genes_within_50KB %>%
mutate(isDE = X8 %in% DE_sh1sh2$X4)
colnames(genes_within_50KB) <- c("chr_h", "start_h", "end_h", "region_name",
"chr_g", "start_g", "end_g", "gene_name",
"nd", "gene_strand", "distance", "isGeneDE" )
genes_within_50KB
genes_within_50KB %>% dplyr::filter(isGeneDE == T) %>% group_by(gene_name)
DE_sh1sh2
DE_sh1sh2$X4
setwd("/mnt/hdd0/univ/thesis-support-material/data/4-6")
dir()
setwd("/mnt/hdd0/univ/thesis-support-material/data/4-6/all_vs_50kb/")
setwd("/mnt/hdd0/univ/thesis-support-material/data/4-6/all_vs_50kb/input/")
write.table(DE_sh1sh2$X4, file = "allDEgenes.txt",
quote = F, row.names = F, col.names = F, sep = "\t")
genes_within_50KB
genes_within_50KB %>% dplyr::filter(isGeneDE == T) %>% group_by(gene_name)
genes_within_50KB %>% dplyr::filter(isGeneDE == T)
genes_within_50KB %>% dplyr::filter(isGeneDE == T) %>% select(gene_name)
(genes_within_50KB %>% dplyr::filter(isGeneDE == T) %>% dplyr::select(gene_name))$gene_name
unique((genes_within_50KB %>% dplyr::filter(isGeneDE == T) %>% dplyr::select(gene_name))$gene_name)
DE50KB <- unique((genes_within_50KB %>% dplyr::filter(isGeneDE == T) %>% dplyr::select(gene_name))$gene_name)
write.table(DE50KB, file = "DE50KB",
quote = F, row.names = F, col.names = F, sep = "\t")
write.table(DE50KB, file = "DE50KB.txt",
quote = F, row.names = F, col.names = F, sep = "\t")
setwd("/mnt/hdd0/univ/thesis-support-material/data/4-6/all_vs_50kb/input/raw/")
write.table(DE_sh1sh2$X4, file = "allDEgenes.txt",
quote = F, row.names = F, col.names = F, sep = "\t")
DE50KB <- unique((genes_within_50KB %>% dplyr::filter(isGeneDE == T) %>% dplyr::select(gene_name))$gene_name)
write.table(DE50KB, file = "DE50KB.txt",
quote = F, row.names = F, col.names = F, sep = "\t")
BP_all <- read_delim("/mnt/hdd0/univ/thesis-support-material/data/4-6/all_vs_50kb/panther/output/allDEgenes/BP.txt",
"\t", escape_double = FALSE, col_types = cols(`allDEgenes.txt (FDR)` = col_double()),
trim_ws = TRUE, skip = 6)
library(readr)
BP_all <- read_delim("/mnt/hdd0/univ/thesis-support-material/data/4-6/all_vs_50kb/panther/output/allDEgenes/BP.txt",
"\t", escape_double = FALSE, col_types = cols(`allDEgenes.txt (FDR)` = col_double()),
trim_ws = TRUE, skip = 6)
MF_all <- read_delim("/mnt/hdd0/univ/thesis-support-material/data/4-6/all_vs_50kb/panther/output/allDEgenes/MF.txt",
"\t", escape_double = FALSE, col_types = cols(`allDEgenes.txt (FDR)` = col_double()),
trim_ws = TRUE, skip = 6)
View(MF_all)
MF_all <- read_delim("/mnt/hdd0/univ/thesis-support-material/data/4-6/all_vs_50kb/panther/output/allDEgenes/MF.txt",
"\t", escape_double = FALSE, col_types = cols(`allDEgenes.txt (FDR)` = col_double()),
trim_ws = TRUE, skip = 6)
View(MF_all)
CC_all <- read_delim("/mnt/hdd0/univ/thesis-support-material/data/4-6/all_vs_50kb/panther/output/allDEgenes/CC.txt",
"\t", escape_double = FALSE, col_types = cols(`allDEgenes.txt (FDR)` = col_double()),
trim_ws = TRUE, skip = 6)
BP_50KB <- read_delim("/mnt/hdd0/univ/thesis-support-material/data/4-6/all_vs_50kb/panther/output/DE50KB/BP.txt",
"\t", escape_double = FALSE, col_types = cols(`allDEgenes.txt (FDR)` = col_double()),
trim_ws = TRUE, skip = 6)
View(BP_50KB)
BP_50KB <- read_delim("/mnt/hdd0/univ/thesis-support-material/data/4-6/all_vs_50kb/panther/output/DE50KB/BP.txt",
"\t", escape_double = FALSE, trim_ws = TRUE, skip = 6)
View(BP_50KB)
