# model fitting
fit <- lmFit(y, mm)
# setting the comparison between control and sh1
contr <- makeContrasts(groupsh1 - groupcontrol, levels = colnames(coef(fit)))
# Estimate contrast for each gene
tmp <- contrasts.fit(fit, contr)
tmp <- eBayes(tmp)
result.table <- topTable(tmp, sort.by = "P", n = Inf)
DE.genes.sh1.limma <- result.table %>%
filter(adj.P.Val < padj.cutoff &
abs(logFC) > lfc.cutoff ) %>%
arrange(-logFC) %>%
mutate(gene = rownames(.)) %>%
select(gene, adj.P.Val, logFC)
DE.genes.sh1.limma <- as_tibble(DE.genes.sh1.limma)
# -----------------------
rm(counts)
rm(condition)
rm(sampleInfo)
rm(group)
rm(d0)
rm(d)
rm(mm)
rm(drop)
rm(y)
rm(fit)
rm(contr)
rm(tmp)
rm(result.table)
# ----- shNT vs sh-2 ----
# keeping only shNT and sh-2 samples
counts <- counts_simple_full[,c(1,4,3,6)]
condition <- factor(c(rep("control", 2), rep("sh2", 2)))
sampleInfo <- data.frame(row.names = colnames(counts), condition)
group <- sampleInfo$condition
# creating object
d0 <- DGEList(counts)
# compute normalization factors
d0 <- calcNormFactors(d0)
# filtering low expressed genes
# we remove the genes whose cpm normalized count is < 1
# in every sample
cutoff <- 1
drop <- which(apply(cpm(d0), 1, max) < cutoff)
d <- d0[-drop,]
#dim(d) # number of genes left
mm <- model.matrix(~0 + group)
y <- voom(d, mm, plot = F)
# model fitting
fit <- lmFit(y, mm)
# setting the comparison between control and sh1
contr <- makeContrasts(groupsh2 - groupcontrol, levels = colnames(coef(fit)))
# Estimate contrast for each gene
tmp <- contrasts.fit(fit, contr)
tmp <- eBayes(tmp)
result.table <- topTable(tmp, sort.by = "P", n = Inf)
DE.genes.sh2.limma <- result.table %>%
filter(adj.P.Val < padj.cutoff &
abs(logFC) > lfc.cutoff ) %>%
arrange(-logFC) %>%
mutate(gene = rownames(.)) %>%
select(gene, adj.P.Val, logFC)
DE.genes.sh2.limma <- as_tibble(DE.genes.sh2.limma)
# ----------------------------------
rm(counts)
rm(condition)
rm(sampleInfo)
rm(group)
rm(d0)
rm(d)
rm(mm)
rm(drop)
rm(y)
rm(fit)
rm(contr)
rm(tmp)
rm(result.table)
rm(counts_full)
rm(counts_simple_full)
rm(cutoff)
rm(lfc.cutoff)
rm(padj.cutoff)
DE.genes.sh1.limma %>% filter(gene == "h3k27ac_input_peak_52267")
DE.genes.sh2.limma %>% filter(gene == "h3k27ac_input_peak_52267")
DE.genes.sh1.limma
DE.genes.sh1.deseq2 <- res_table_tb_sh1 %>%
filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff) %>%
arrange(-abs(log2FoldChange))
DE.genes.sh1.deseq2 <- DE.genes.sh1.deseq2 %>%
select(gene, padj, log2FoldChange, pvalue)
rm(dds)
rm(meta)
rm(counts)
rm(normalized_counts)
rm(condition)
rm(res_table_sh1_shrunken)
rm(res_table_sh1_unshrunken)
rm(res_table_tb_sh1)
rm(contrast.sh1)
View(histone_bed_sh1)
View(DE.genes.sh1.limma)
View(DE.genes.sh1.edger)
library(dplyr)
library(tibble)
library(DESeq2)
library(readr)
library(ggrepel)
setwd("/mnt/hdd0/univ/thesis-support-material/data/4-4/featureCounts-output/")
filename = "counts.txt"
counts_full <- read_delim(filename, "\t",
escape_double = FALSE, trim_ws = TRUE, skip = 1)
counts_simple_full <- as.matrix(counts_full[,c(7,8,9,10,11,12)])
colnames(counts_simple_full) <- c("bc1-1", "bc1-2", "bc1-3", "bc2-1", "bc2-2", "bc2-3")
rownames(counts_simple_full) <- counts_full$Geneid
counts_simple_full
counts_simple_full['ENSG00000253161']
counts_simple_full['ENSG00000253161',]
counts_simple_full['ENSG00000253161.',]
View(counts_simple_full)
View(counts_full)
counts_simple_full['ENSG00000253161.5_9',]
# setting the value for the filtering parameters
padj.cutoff <- 0.01
lfc.cutoff <- 0.58
# ----- shNT vs sh1 ----
counts <- counts_simple_full[,c(1,4,2,5)]
condition <- factor(c(rep("control", 2), rep("sh1", 2)))
meta <- data.frame(row.names = colnames(counts), condition)
dds <- DESeqDataSetFromMatrix(countData = counts, colData = meta, design = ~condition)
dds <- DESeq(dds)
normalized_counts <- counts(dds, normalized=TRUE)
contrast.sh1 <- c("condition", "sh1", "control")
res_table_sh1_unshrunken <- results(dds, contrast = contrast.sh1, alpha = padj.cutoff)
res_table_sh1_shrunken <- lfcShrink(dds, contrast = contrast.sh1, res=res_table_sh1_unshrunken)
res_table_tb_sh1 <- res_table_sh1_shrunken %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
DE.genes.sh1.deseq2 <- res_table_tb_sh1 %>%
filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff) %>%
arrange(-abs(log2FoldChange))
DE.genes.sh1.deseq2 <- DE.genes.sh1.deseq2 %>%
select(gene, padj, log2FoldChange, pvalue)
# --- volcano plot locating the genes of the GO term "regulation of nuclear division"
# temp <- res_table_tb_sh1 %>% mutate(gene = substr(gene, 0, 15))
#
# regulation_nuclear_division <- read_csv("~/univ/thesis-support-material/data/4-4/aux/regulation_nuclear_division.txt",
#                                         col_names = FALSE)
#
# gene_symbol_Enseml_mapping <- read_delim("~/univ/thesis-support-material/data/4-5/gene-symbol-Enseml-mapping.txt",
#                                          "\t", escape_double = FALSE, col_names = FALSE, trim_ws = TRUE)
#
# a <- temp %>%
#             filter(!is.na(padj)) %>%
#             mutate(DE = (padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)) %>%
#             mutate(target = ifelse(gene %in% regulation_nuclear_division$X1 , T,F)) %>%
#             inner_join(gene_symbol_Enseml_mapping, by = c("gene" = "X1")) %>%
#             mutate(text = ifelse(target, X2, NA))
# a %>%
# ggplot(mapping = aes(x=log2FoldChange,
#                          y=-log10(padj),
#                          shape=DE,
#                          col=target,
#                          label = text)) +
#         geom_point(alpha = 0.7) +
#         geom_point(data = (a %>% filter(gene %in% regulation_nuclear_division$X1))) +
#         theme_minimal() +
#         geom_text_repel(max.overlaps = 35) +
#         scale_color_manual(values=c("lightblue", "plum4")) +
#         xlim(c(-2,4.2)) +
#         ylim(c(0, 75)) +
#         theme(legend.position = "none") +
#         geom_vline(xintercept=c(-1*lfc.cutoff, lfc.cutoff), col="grey") +
#         geom_hline(yintercept=-log10(padj.cutoff), col="grey") +
#         labs(title = "Differentially expressed genes involved in the regulation of nuclear division process",
#              x = "log2 fold change",
#              y = "-log10(pvalue)")
#
# rm(temp, a, regulation_nuclear_division, gene_symbol_Enseml_mapping)
# ----------------------
rm(dds)
rm(meta)
rm(counts)
rm(normalized_counts)
rm(condition)
rm(res_table_sh1_shrunken)
rm(res_table_sh1_unshrunken)
rm(res_table_tb_sh1)
rm(contrast.sh1)
# ----- shNT vs sh2 ----
counts <- counts_simple_full[,c(1,4,3,6)]
condition <- factor(c(rep("control", 2), rep("sh2", 2)))
meta <- data.frame(row.names = colnames(counts), condition)
dds <- DESeqDataSetFromMatrix(countData = counts, colData = meta, design = ~condition)
dds <- DESeq(dds)
normalized_counts <- counts(dds, normalized=TRUE)
contrast.sh2 <- c("condition", "sh2", "control")
res_table_sh2_unshrunken <- results(dds, contrast = contrast.sh2, alpha = padj.cutoff)
res_table_sh2_shrunken <- lfcShrink(dds, contrast = contrast.sh2, res=res_table_sh2_unshrunken)
res_table_tb_sh2 <- res_table_sh2_shrunken %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
DE.genes.sh2.deseq2 <- res_table_tb_sh2 %>%
filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff) %>%
arrange(-abs(log2FoldChange))
DE.genes.sh2.deseq2 <- DE.genes.sh2.deseq2 %>%
select(gene, padj, log2FoldChange, pvalue)
# --------------------------------
# a value of LFC > 0 means that the gene is MORE EXPRESSED in the sh-1 (or sh-2)
# samples (the gene is upregulated upon tp53-mut silencing)
# example:
# gene ENSG00000039068.19_8 has LFC > 5,
# the raw counts for that gene are:
#
# bc1-1 bc1-2 bc1-3 bc2-1 bc2-2 bc2-3
#    37  2612  1547    36  3093  1759
rm(dds)
rm(meta)
rm(counts)
rm(normalized_counts)
rm(condition)
rm(res_table_sh2_shrunken)
rm(res_table_sh2_unshrunken)
rm(res_table_tb_sh2)
rm(contrast.sh2)
rm(counts_full)
rm(counts_simple_full)
rm(lfc.cutoff)
rm(padj.cutoff)
rm(filename)
# ----------------------------------
#DE.genes.sh1.deseq2.upreg <- DE.genes.sh1.deseq2 %>% filter(log2FoldChange > 0)
#DE.genes.sh1.deseq2.downreg <- DE.genes.sh1.deseq2 %>% filter(log2FoldChange < 0)
#DE.genes.sh2.deseq2.upreg <- DE.genes.sh2.deseq2 %>% filter(log2FoldChange > 0)
#DE.genes.sh2.deseq2.downreg <- DE.genes.sh2.deseq2 %>% filter(log2FoldChange < 0)
#setwd("/mnt/hdd0/univ/lab2/rnaseq/DE_analysis/Deseq2")
#write.table(DE.genes.sh1.deseq2, file = "DE_sh1_DESEQ2.txt",
#            col.names = T, row.names = F, sep = "\t", quote = F)
#write.table(DE.genes.sh2.deseq2, file = "DE_sh2_DESEQ2.txt",
#            col.names = T, row.names = F, sep = "\t", quote = F)
View(DE.genes.sh1.deseq2)
counts_simple_full['ENSG00000253161.5_9',]
DE.genes.sh1.deseq2 %>% filter(gene == "ENSG00000253161.5_9")
DE.genes.sh2.deseq2 %>% filter(gene == "ENSG00000253161.5_9")
library(edgeR)
library(dplyr)
library(tibble)
library(readr)
library(HTSFilter)
# GUIDE used:
# http://www.nathalievialaneix.eu/doc/html/solution_edgeR-tomato-withcode.html
# importing data
setwd("/mnt/hdd0/univ/thesis-support-material/data/4-4/featureCounts-output/")
filename = "counts.txt"
#filename = "filtered-only-lncrnas/counts_only_lncRNA.txt"
counts_full <- read_delim(filename, "\t",
escape_double = FALSE, trim_ws = TRUE, skip = 1)
counts_simple_full <- as.matrix(counts_full[,c(7,8,9,10,11,12)])
# renaming the rows and columns
# note: bc*-1 are the shNT samples
#       bc*-2 are the sh1 samples
#       bc*-3 are the sh2 samples
colnames(counts_simple_full) <- c("bc1-1", "bc1-2", "bc1-3", "bc2-1", "bc2-2", "bc2-3")
rownames(counts_simple_full) <- counts_full$Geneid
# set adjusted pvalue and LFC cutoffs
padj.cutoff <- 0.01
lfc.cutoff <- 0.58
# ----- shNT vs sh1 ----
# keeping only shNT and sh1 samples
counts <- counts_simple_full[,c(1,4,2,5)]
condition <- factor(c(rep("control", 2), rep("sh1", 2)))
sampleInfo <- data.frame(row.names = colnames(counts), condition)
# creating edger data object
dgeFull <- DGEList(counts, group=sampleInfo$condition)
# remove genes with zero counts for all samples
dgeFull <- DGEList(dgeFull$counts[apply(dgeFull$counts, 1, sum) != 0, ],
group=dgeFull$samples$group)
# estimate the normalization factors
dgeFull <- calcNormFactors(dgeFull, method="TMM")
# estimate common and tagwise dispersion
dgeFull <- estimateCommonDisp(dgeFull)
dgeFull <- estimateTagwiseDisp(dgeFull)
# perform an exact test for the difference in expression between the two conditions
# and get top DE genes
dgeTest <- exactTest(dgeFull)
resNoFilt <- topTags(dgeTest, n=nrow(dgeTest$table))
# perform independent filtering, removing poorly expressed genes to
# reduce problem of multiple testing
# note: DESEQ2 does this filtering automatically
filtData <- HTSFilter(dgeFull)$filteredData
dgeTestFilt <- exactTest(filtData)
resFilt <- topTags(dgeTestFilt, n=nrow(dgeTest$table))
# keep only the DE genes that satisfy the cutoffs
DE.genes.sh1.edger <- resFilt$table[resFilt$table$FDR < padj.cutoff &
abs(resFilt$table$logFC) > lfc.cutoff,]
DE.genes.sh1.edger <- DE.genes.sh1.edger[order(DE.genes.sh1.edger$logFC),]
DE.genes.sh1.edger <- DE.genes.sh1.edger %>%
mutate(gene = rownames(.)) %>%
select(gene, FDR, logFC, PValue)
DE.genes.sh1.edger <- as_tibble(DE.genes.sh1.edger)
# -----------------------
rm(counts)
rm(dgeFull)
rm(dgeTest)
rm(dgeTestFilt)
rm(filtData)
rm(resNoFilt)
rm(resFilt)
rm(sampleInfo)
rm(condition)
# ----- shNT vs sh2 ----
# keeping only shNT and sh2 samples
counts <- counts_simple_full[,c(1,4,3,6)]
condition <- factor(c(rep("control", 2), rep("sh2", 2)))
sampleInfo <- data.frame(row.names = colnames(counts), condition)
# creating edger data object
dgeFull <- DGEList(counts, group=sampleInfo$condition)
# remove genes with zero counts for all samples
dgeFull <- DGEList(dgeFull$counts[apply(dgeFull$counts, 1, sum) != 0, ],
group=dgeFull$samples$group)
# estimate the normalization factors
dgeFull <- calcNormFactors(dgeFull, method="TMM")
# estimate common and tagwise dispersion
dgeFull <- estimateCommonDisp(dgeFull)
dgeFull <- estimateTagwiseDisp(dgeFull)
# perform an exact test for the difference in expression between the two conditions
# and get top DE genes
dgeTest <- exactTest(dgeFull)
resNoFilt <- topTags(dgeTest, n=nrow(dgeTest$table))
# perform independent filtering, removing poorly expressed genes to
# reduce problem of multiple testing
# note: DESEQ2 does this filtering automatically
filtData <- HTSFilter(dgeFull)$filteredData
dgeTestFilt <- exactTest(filtData)
resFilt <- topTags(dgeTestFilt, n=nrow(dgeTest$table))
# keep only the DE genes that satisfy the cutoffs
DE.genes.sh2.edger <- resFilt$table[resFilt$table$FDR < padj.cutoff &
abs(resFilt$table$logFC) > lfc.cutoff,]
DE.genes.sh2.edger <- DE.genes.sh2.edger[order(DE.genes.sh2.edger$logFC),]
DE.genes.sh2.edger <- DE.genes.sh2.edger %>%
mutate(gene = rownames(.)) %>%
select(gene, FDR, logFC, PValue)
DE.genes.sh2.edger <- as_tibble(DE.genes.sh2.edger)
# ------------------------------
# a value of LFC > 0 means that the gene is MORE EXPRESSED in the sh1 (or sh2)
# samples (the gene is upregulated upon tp53-mut silencing)
rm(counts)
rm(dgeFull)
rm(dgeTest)
rm(dgeTestFilt)
rm(filtData)
rm(resNoFilt)
rm(resFilt)
rm(sampleInfo)
rm(condition)
rm(counts_full)
rm(counts_simple_full)
rm(lfc.cutoff)
rm(padj.cutoff)
rm(filename)
# ------------------------------
#DE.genes.sh1.edger.upreg <- DE.genes.sh1.edger %>% filter(logFC > 0)
#DE.genes.sh1.edger.downreg <- DE.genes.sh1.edger %>% filter(logFC < 0)
#DE.genes.sh2.edger.upreg <- DE.genes.sh2.edger %>% filter(logFC > 0)
#DE.genes.sh2.edger.downreg <- DE.genes.sh2.edger %>% filter(logFC < 0)
library(edgeR)
library(tidyr)
library(dplyr)
library(readr)
library(stringr)
# GUIDE:
# https://ucdavis-bioinformatics-training.github.io/2018-June-RNA-Seq-Workshop/thursday/DE.html
# importing data
setwd("/mnt/hdd0/univ/thesis-support-material/data/4-4/featureCounts-output/")
filename = "counts.txt"
#filename = "filtered-only-lncrnas/counts_only_lncRNA.txt"
counts_full <- read_delim(filename, "\t",
escape_double = FALSE, trim_ws = TRUE, skip = 1)
counts_simple_full <- as.matrix(counts_full[,c(7,8,9,10,11,12)])
# renaming the rows and columns
# note: bc*-1 are the shNT samples
#       bc*-2 are the sh1 samples
#       bc*-3 are the sh2 samples
colnames(counts_simple_full) <- c("bc1-1", "bc1-2", "bc1-3", "bc2-1", "bc2-2", "bc2-3")
rownames(counts_simple_full) <- counts_full$Geneid
# set adjusted pvalue and LFC cutoffs
padj.cutoff <- 0.01
lfc.cutoff <- 0.58
# ----- shNT vs sh-1 ----
# keeping only shNT and sh1 samples
counts <- counts_simple_full[,c(1,4,2,5)]
condition <- factor(c(rep("control", 2), rep("sh1", 2)))
sampleInfo <- data.frame(row.names = colnames(counts), condition)
group <- sampleInfo$condition
# creating object
d0 <- DGEList(counts)
# compute normalization factors
d0 <- calcNormFactors(d0)
# filtering low expressed genes
# we remove the genes whose cpm normalized count is < 1
# in every sample
cutoff <- 1
drop <- which(apply(cpm(d0), 1, max) < cutoff)
d <- d0[-drop,]
mm <- model.matrix(~0 + group)
y <- voom(d, mm, plot = F)
# model fitting
fit <- lmFit(y, mm)
# setting the comparison between control and sh1
contr <- makeContrasts(groupsh1 - groupcontrol, levels = colnames(coef(fit)))
# Estimate contrast for each gene
tmp <- contrasts.fit(fit, contr)
tmp <- eBayes(tmp)
result.table <- topTable(tmp, sort.by = "P", n = Inf)
DE.genes.sh1.limma <- result.table %>%
filter(adj.P.Val < padj.cutoff &
abs(logFC) > lfc.cutoff ) %>%
arrange(-logFC) %>%
mutate(gene = rownames(.)) %>%
select(gene, adj.P.Val, logFC)
DE.genes.sh1.limma <- as_tibble(DE.genes.sh1.limma)
# -----------------------
rm(counts)
rm(condition)
rm(sampleInfo)
rm(group)
rm(d0)
rm(d)
rm(mm)
rm(drop)
rm(y)
rm(fit)
rm(contr)
rm(tmp)
rm(result.table)
# ----- shNT vs sh2 ----
# keeping only shNT and sh2 samples
counts <- counts_simple_full[,c(1,4,3,6)]
condition <- factor(c(rep("control", 2), rep("sh2", 2)))
sampleInfo <- data.frame(row.names = colnames(counts), condition)
group <- sampleInfo$condition
# creating object
d0 <- DGEList(counts)
# compute normalization factors
d0 <- calcNormFactors(d0)
# filtering low expressed genes
# we remove the genes whose cpm normalized count is < 1
# in every sample
cutoff <- 1
drop <- which(apply(cpm(d0), 1, max) < cutoff)
d <- d0[-drop,]
mm <- model.matrix(~0 + group)
y <- voom(d, mm, plot = F)
# model fitting
fit <- lmFit(y, mm)
# setting the comparison between control and sh1
contr <- makeContrasts(groupsh2 - groupcontrol, levels = colnames(coef(fit)))
# Estimate contrast for each gene
tmp <- contrasts.fit(fit, contr)
tmp <- eBayes(tmp)
result.table <- topTable(tmp, sort.by = "P", n = Inf)
DE.genes.sh2.limma <- result.table %>%
filter(adj.P.Val < padj.cutoff &
abs(logFC) > lfc.cutoff ) %>%
arrange(-logFC) %>%
mutate(gene = rownames(.)) %>%
select(gene, adj.P.Val, logFC)
DE.genes.sh2.limma <- as_tibble(DE.genes.sh2.limma)
# ----------------------------------
# a value of LFC > 0 means that the gene is MORE EXPRESSED in the sh1 (or sh2)
# samples (the gene is upregulated upon tp53-mut silencing)
rm(counts)
rm(condition)
rm(sampleInfo)
rm(group)
rm(d0)
rm(d)
rm(mm)
rm(drop)
rm(y)
rm(fit)
rm(contr)
rm(tmp)
rm(result.table)
rm(counts_full)
rm(counts_simple_full)
rm(cutoff)
rm(lfc.cutoff)
rm(padj.cutoff)
rm(filename)
# -----------------------------------
#DE.genes.sh1.limma.upreg <- DE.genes.sh1.limma %>% filter(logFC > 0)
#DE.genes.sh1.limma.downreg <- DE.genes.sh1.limma %>% filter(logFC < 0)
#DE.genes.sh2.limma.upreg <- DE.genes.sh2.limma %>% filter(logFC > 0)
#DE.genes.sh2.limma.downreg <- DE.genes.sh2.limma %>% filter(logFC < 0)
DE.genes.sh1.edger %>% filter(gene == "ENSG00000253161.5_9")
DE.genes.sh2.edger %>% filter(gene == "ENSG00000253161.5_9")
DE.genes.sh1.limma %>% filter(gene == "ENSG00000253161.5_9")
DE.genes.sh2.limma %>% filter(gene == "ENSG00000253161.5_9")
library(dplyr)
library(tibble)
library(DESeq2)
library(readr)
library(ggrepel)
setwd("/mnt/hdd0/univ/thesis-support-material/data/4-5/question2/1-DE_histones/")
counts_full <- read_delim("counts.txt", "\t",
escape_double = FALSE, trim_ws = TRUE, skip = 1)
counts_simple_full <- as.matrix(counts_full[,c(7,8,9,10,11,12)])
colnames(counts_simple_full) <- c("bc1-1", "bc1-2", "bc1-3", "bc2-1", "bc2-2", "bc2-3")
rownames(counts_simple_full) <- counts_full$Geneid
View(counts_simple_full)
